<launch>
    <!-- Disable if running online and not from a bag/using gazebo simulation -->
  <param name="use_sim_time" value="false"/>

  <!-- Arguments -->
  <arg name="open_rviz" default="true"/>
  <!--Car model-->
  <arg name="model_file" default="robotCar.urdf"/>
  <arg name="model" default="$(find autonomous_car)/urdf/$(arg model_file)"/>
  
  <!--Map server -->
  <arg name="map_file" default="$(find autonomous_car)/maps/IST_map_disc.yaml"/>
  
  <!--Move_base Args-->
  <arg name="no_static_map" default="false"/>
  <arg name="base_global_planner" default="navfn/NavfnROS"/>
  <arg name="base_local_planner" default="dwa_local_planner/DWAPlannerROS"/>
  <!-- <arg name="base_local_planner" default="base_local_planner/TrajectoryPlannerROS"/> -->
  <arg name="cmd_vel_topic" default="/control_cmd_vel" />
  <arg name="odom_topic" default="/odom" />
  <arg name="move_forward_only" default="false"/>

  <!--Robot Model Initialization--> 
  <param name="robot_description" command="$(find xacro)/xacro $(arg model)" />

   <!-- Adding the my_map tf to the tf tree-->
  <node pkg="tf2_ros" type="static_transform_publisher" name="my_map_to_map" args="0 0 0 0 0 0 1 /disc_map /map "/>

  <!-- Map server -->
  <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)"/>

  <!--Navigation--> 
  <!-- The move_base node -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" clear_params="true" output="screen">

    <param name="base_global_planner" value="$(arg base_global_planner)"/>
    <param name="base_local_planner" value="$(arg base_local_planner)"/>  
    <rosparam file="$(find autonomous_car)/param/planner.yaml" command="load"/>

    <!-- observation sources located in costmap_common.yaml -->
    <rosparam file="$(find autonomous_car)/param/costmap_common.yaml" command="load" ns="global_costmap" />

    <!-- local costmap, needs size -->
    <rosparam file="$(find autonomous_car)/param/costmap_local.yaml" command="load" ns="local_costmap" />
    <param name="local_costmap/width" value="10.0"/>
    <param name="local_costmap/height" value="10.0"/>

    <!-- static global costmap, static map provides size -->
    <rosparam file="$(find autonomous_car)/param/costmap_global_static.yaml" command="load" ns="global_costmap" unless="$(arg no_static_map)"/>
    
    <!-- global costmap with laser, for odom_navigation_demo -->
    <rosparam file="$(find autonomous_car)/param/costmap_global_laser.yaml" command="load" ns="global_costmap" if="$(arg no_static_map)"/>
    <param name="global_costmap/width" value="100.0" if="$(arg no_static_map)"/>
    <param name="global_costmap/height" value="100.0" if="$(arg no_static_map)"/>

    <!-- <remap from="cmd_vel" to="$(arg cmd_vel_topic)"/> -->
    <remap from="odom" to="$(arg odom_topic)"/>
  </node>

  <!--Localisation--> 
  <node name="odometry_publisher" pkg="autonomous_car" type="odom_publisher.py" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <rosparam param="source_list">["steering_state"]</rosparam>
  </node>
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

  <node name="baseController" pkg="autonomous_car" type="base_controller.py" />

   <!-- Run fake localization compatible with AMCL output -->
  <node pkg="fake_localization" type="fake_localization" name="fake_localization" clear_params="true" output="screen">
     <remap from="base_pose_ground_truth" to="odom" />
     <param name="global_frame_id" value="map" />
     <param name="base_frame_id" value="base_footprint" />
  </node>

  <!-- Rviz -->
   <group if="$(arg open_rviz)"> 
    <node pkg="rviz" type="rviz" name="rviz" required="true" args="-d $(find autonomous_car)/rviz/test_aut_car.rviz"/>
  </group>-

  <!--Get goals and viapoints through Rviz 2D Nav Goal tool-->
  <!--node name="navigation_goals" pkg="autonomous_car" type="navigation_goals.py" output="screen"/-->

  <!-- Hector_trajectory_server -->
  <node pkg="hector_trajectory_server" type="hector_trajectory_server" name="hector_trajectory_server" output="screen">
    <param name="target_frame_name" type="string" value="/map" />
    <param name="source_frame_name" type="string" value="/base_link" />
    <param name="trajectory_update_rate" type="double" value="4" />
    <param name="trajectory_publish_rate" type="double" value="0.25" />
  </node>

</launch>
